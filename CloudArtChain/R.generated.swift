//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 18 files.
  struct file {
    /// Resource file `ChinaCity.json`.
    static let chinaCityJson = Rswift.FileResource(bundle: R.hostingBundle, name: "ChinaCity", pathExtension: "json")
    /// Resource file `QRCodeScanLine@2x.png`.
    static let qrCodeScanLine2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "QRCodeScanLine@2x", pathExtension: "png")
    /// Resource file `Res.bundle`.
    static let resBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Res", pathExtension: "bundle")
    /// Resource file `btn_video_flip_camera@2x.png`.
    static let btn_video_flip_camera2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "btn_video_flip_camera@2x", pathExtension: "png")
    /// Resource file `btn_video_flip_camera@3x.png`.
    static let btn_video_flip_camera3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "btn_video_flip_camera@3x", pathExtension: "png")
    /// Resource file `hVideo_back@2x.png`.
    static let hVideo_back2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_back@2x", pathExtension: "png")
    /// Resource file `hVideo_back@3x.png`.
    static let hVideo_back3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_back@3x", pathExtension: "png")
    /// Resource file `hVideo_cancel_refresh@2x.png`.
    static let hVideo_cancel_refresh2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_cancel_refresh@2x", pathExtension: "png")
    /// Resource file `hVideo_cancel_refresh@3x.png`.
    static let hVideo_cancel_refresh3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_cancel_refresh@3x", pathExtension: "png")
    /// Resource file `hVideo_confirm_back@2x.png`.
    static let hVideo_confirm_back2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_confirm_back@2x", pathExtension: "png")
    /// Resource file `hVideo_confirm_back@3x.png`.
    static let hVideo_confirm_back3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_confirm_back@3x", pathExtension: "png")
    /// Resource file `hVideo_focusing@2x.png`.
    static let hVideo_focusing2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_focusing@2x", pathExtension: "png")
    /// Resource file `hVideo_focusing@3x.png`.
    static let hVideo_focusing3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_focusing@3x", pathExtension: "png")
    /// Resource file `hVideo_take@2x.png`.
    static let hVideo_take2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_take@2x", pathExtension: "png")
    /// Resource file `hVideo_take@3x.png`.
    static let hVideo_take3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "hVideo_take@3x", pathExtension: "png")
    /// Resource file `photos_icon@2x.png`.
    static let photos_icon2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "photos_icon@2x", pathExtension: "png")
    /// Resource file `right@2x.png`.
    static let right2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "right@2x", pathExtension: "png")
    /// Resource file `scan_back@2x.png`.
    static let scan_back2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "scan_back@2x", pathExtension: "png")

    /// `bundle.url(forResource: "ChinaCity", withExtension: "json")`
    static func chinaCityJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.chinaCityJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "QRCodeScanLine@2x", withExtension: "png")`
    static func qrCodeScanLine2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.qrCodeScanLine2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Res", withExtension: "bundle")`
    static func resBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.resBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "btn_video_flip_camera@2x", withExtension: "png")`
    static func btn_video_flip_camera2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.btn_video_flip_camera2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "btn_video_flip_camera@3x", withExtension: "png")`
    static func btn_video_flip_camera3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.btn_video_flip_camera3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_back@2x", withExtension: "png")`
    static func hVideo_back2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_back2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_back@3x", withExtension: "png")`
    static func hVideo_back3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_back3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_cancel_refresh@2x", withExtension: "png")`
    static func hVideo_cancel_refresh2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_cancel_refresh2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_cancel_refresh@3x", withExtension: "png")`
    static func hVideo_cancel_refresh3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_cancel_refresh3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_confirm_back@2x", withExtension: "png")`
    static func hVideo_confirm_back2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_confirm_back2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_confirm_back@3x", withExtension: "png")`
    static func hVideo_confirm_back3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_confirm_back3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_focusing@2x", withExtension: "png")`
    static func hVideo_focusing2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_focusing2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_focusing@3x", withExtension: "png")`
    static func hVideo_focusing3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_focusing3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_take@2x", withExtension: "png")`
    static func hVideo_take2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_take2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "hVideo_take@3x", withExtension: "png")`
    static func hVideo_take3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hVideo_take3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "photos_icon@2x", withExtension: "png")`
    static func photos_icon2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.photos_icon2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "right@2x", withExtension: "png")`
    static func right2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.right2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "scan_back@2x", withExtension: "png")`
    static func scan_back2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scan_back2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
  struct id {
    struct titleWithSubtitleTableViewCell {
      /// Accessibility identifier `modalPickerCellId`.
      static let modalPickerCellId: String = "modalPickerCellId"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 284 images.
  struct image {
    /// Image `EditBrushMosaicSelected`.
    static let editBrushMosaicSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditBrushMosaicSelected")
    /// Image `EditBrushMosaic`.
    static let editBrushMosaic = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditBrushMosaic")
    /// Image `EditImageClipCancel`.
    static let editImageClipCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditImageClipCancel")
    /// Image `EditImageClipDone`.
    static let editImageClipDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditImageClipDone")
    /// Image `EditMenuClipImage`.
    static let editMenuClipImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuClipImage")
    /// Image `EditMenuCutSelected`.
    static let editMenuCutSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuCutSelected")
    /// Image `EditMenuCut`.
    static let editMenuCut = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuCut")
    /// Image `EditMenuGraffitiBack`.
    static let editMenuGraffitiBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuGraffitiBack")
    /// Image `EditMenuGraffitiSelected`.
    static let editMenuGraffitiSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuGraffitiSelected")
    /// Image `EditMenuGraffiti`.
    static let editMenuGraffiti = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuGraffiti")
    /// Image `EditMenuMosaicSelected`.
    static let editMenuMosaicSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuMosaicSelected")
    /// Image `EditMenuMosaic`.
    static let editMenuMosaic = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuMosaic")
    /// Image `EditMenuStickerSelected`.
    static let editMenuStickerSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuStickerSelected")
    /// Image `EditMenuSticker`.
    static let editMenuSticker = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuSticker")
    /// Image `EditMenuTextBackgroundColor`.
    static let editMenuTextBackgroundColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuTextBackgroundColor")
    /// Image `EditMenuTextColor`.
    static let editMenuTextColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuTextColor")
    /// Image `EditMenuTextSelected`.
    static let editMenuTextSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuTextSelected")
    /// Image `EditMenuText`.
    static let editMenuText = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMenuText")
    /// Image `EditMosaicBrush`.
    static let editMosaicBrush = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditMosaicBrush")
    /// Image `EditTraditionalMosaicSelected`.
    static let editTraditionalMosaicSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditTraditionalMosaicSelected")
    /// Image `EditTraditionalMosaic`.
    static let editTraditionalMosaic = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditTraditionalMosaic")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `QRCodeScanLine`.
    static let qrCodeScanLine = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRCodeScanLine")
    /// Image `app_version_update_bg`.
    static let app_version_update_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_version_update_bg")
    /// Image `app_version_update_close`.
    static let app_version_update_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "app_version_update_close")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `backgroundImage`.
    static let backgroundImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "backgroundImage")
    /// Image `cameraAround`.
    static let cameraAround = Rswift.ImageResource(bundle: R.hostingBundle, name: "cameraAround")
    /// Image `cancle`.
    static let cancle = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancle")
    /// Image `cer-bg`.
    static let cerBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "cer-bg")
    /// Image `certificate_bg_bottom`.
    static let certificate_bg_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "certificate_bg_bottom")
    /// Image `certificate_bg_title`.
    static let certificate_bg_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "certificate_bg_title")
    /// Image `certificate_bg_top_left`.
    static let certificate_bg_top_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "certificate_bg_top_left")
    /// Image `certificate_bg_top_right`.
    static let certificate_bg_top_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "certificate_bg_top_right")
    /// Image `certificate_bg`.
    static let certificate_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "certificate_bg")
    /// Image `certificate_close`.
    static let certificate_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "certificate_close")
    /// Image `certificate_thumbnail`.
    static let certificate_thumbnail = Rswift.ImageResource(bundle: R.hostingBundle, name: "certificate_thumbnail")
    /// Image `customer_service_email_icon`.
    static let customer_service_email_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer_service_email_icon")
    /// Image `customer_service_qq_icon`.
    static let customer_service_qq_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer_service_qq_icon")
    /// Image `customer_service_wechat_icon`.
    static let customer_service_wechat_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "customer_service_wechat_icon")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `hVideo_cancel_refresh`.
    static let hVideo_cancel_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "hVideo_cancel_refresh")
    /// Image `hVideo_confirm_back`.
    static let hVideo_confirm_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "hVideo_confirm_back")
    /// Image `hVideo_focusing`.
    static let hVideo_focusing = Rswift.ImageResource(bundle: R.hostingBundle, name: "hVideo_focusing")
    /// Image `hVideo_take`.
    static let hVideo_take = Rswift.ImageResource(bundle: R.hostingBundle, name: "hVideo_take")
    /// Image `home_page_placeholder_edit`.
    static let home_page_placeholder_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_page_placeholder_edit")
    /// Image `home_page_top_bg`.
    static let home_page_top_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_page_top_bg")
    /// Image `ic_down_left`.
    static let ic_down_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_down_left")
    /// Image `ic_down_right`.
    static let ic_down_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_down_right")
    /// Image `ic_rotation`.
    static let ic_rotation = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_rotation")
    /// Image `ic_up_left`.
    static let ic_up_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_up_left")
    /// Image `ic_up_right`.
    static let ic_up_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_up_right")
    /// Image `iconAboutArrow`.
    static let iconAboutArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAboutArrow")
    /// Image `iconAboutEmail`.
    static let iconAboutEmail = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAboutEmail")
    /// Image `iconAboutGit`.
    static let iconAboutGit = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAboutGit")
    /// Image `iconAboutTg`.
    static let iconAboutTg = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAboutTg")
    /// Image `iconAboutWeb`.
    static let iconAboutWeb = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAboutWeb")
    /// Image `iconAlert`.
    static let iconAlert = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAlert")
    /// Image `iconBuy`.
    static let iconBuy = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBuy")
    /// Image `iconClose`.
    static let iconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconClose")
    /// Image `iconCopy`.
    static let iconCopy = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconCopy")
    /// Image `iconDropDown`.
    static let iconDropDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDropDown")
    /// Image `iconEmptyHistory`.
    static let iconEmptyHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEmptyHistory")
    /// Image `iconEmptySearch`.
    static let iconEmptySearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEmptySearch")
    /// Image `iconError`.
    static let iconError = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconError")
    /// Image `iconExport`.
    static let iconExport = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconExport")
    /// Image `iconEye`.
    static let iconEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconEye")
    /// Image `iconFearlessLog`.
    static let iconFearlessLog = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconFearlessLog")
    /// Image `iconInfoSend`.
    static let iconInfoSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconInfoSend")
    /// Image `iconInfo`.
    static let iconInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconInfo")
    /// Image `iconInvalid`.
    static let iconInvalid = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconInvalid")
    /// Image `iconKeyboardOff`.
    static let iconKeyboardOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconKeyboardOff")
    /// Image `iconKsmAsset`.
    static let iconKsmAsset = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconKsmAsset")
    /// Image `iconKsmSmallBg`.
    static let iconKsmSmallBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconKsmSmallBg")
    /// Image `iconKsm`.
    static let iconKsm = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconKsm")
    /// Image `iconLoadingIndicator`.
    static let iconLoadingIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLoadingIndicator")
    /// Image `iconMore`.
    static let iconMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMore")
    /// Image `iconNoEye`.
    static let iconNoEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconNoEye")
    /// Image `iconPlus`.
    static let iconPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPlus")
    /// Image `iconPolkadotAsset`.
    static let iconPolkadotAsset = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPolkadotAsset")
    /// Image `iconPolkadotSmallBg`.
    static let iconPolkadotSmallBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconPolkadotSmallBg")
    /// Image `iconProfileAbout`.
    static let iconProfileAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconProfileAbout")
    /// Image `iconProfileAccounts`.
    static let iconProfileAccounts = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconProfileAccounts")
    /// Image `iconProfileLanguage`.
    static let iconProfileLanguage = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconProfileLanguage")
    /// Image `iconProfileNetworks`.
    static let iconProfileNetworks = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconProfileNetworks")
    /// Image `iconProfilePin`.
    static let iconProfilePin = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconProfilePin")
    /// Image `iconReceive`.
    static let iconReceive = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconReceive")
    /// Image `iconRetry`.
    static let iconRetry = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconRetry")
    /// Image `iconSaveSend`.
    static let iconSaveSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSaveSend")
    /// Image `iconScanQr`.
    static let iconScanQr = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconScanQr")
    /// Image `iconSearch`.
    static let iconSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSearch")
    /// Image `iconSend`.
    static let iconSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSend")
    /// Image `iconShare`.
    static let iconShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconShare")
    /// Image `iconSmallAdd`.
    static let iconSmallAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSmallAdd")
    /// Image `iconSmallArrow`.
    static let iconSmallArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconSmallArrow")
    /// Image `iconTabExtrinsics`.
    static let iconTabExtrinsics = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabExtrinsics")
    /// Image `iconTabGov`.
    static let iconTabGov = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabGov")
    /// Image `iconTabPolkaswap`.
    static let iconTabPolkaswap = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabPolkaswap")
    /// Image `iconTabSettings`.
    static let iconTabSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabSettings")
    /// Image `iconTabStaking`.
    static let iconTabStaking = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabStaking")
    /// Image `iconTabWallet`.
    static let iconTabWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTabWallet")
    /// Image `iconTermsProfile`.
    static let iconTermsProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTermsProfile")
    /// Image `iconTxFailed`.
    static let iconTxFailed = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTxFailed")
    /// Image `iconTxPending`.
    static let iconTxPending = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconTxPending")
    /// Image `iconUpload`.
    static let iconUpload = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconUpload")
    /// Image `iconValidBig`.
    static let iconValidBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconValidBig")
    /// Image `iconValid`.
    static let iconValid = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconValid")
    /// Image `iconWarning`.
    static let iconWarning = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWarning")
    /// Image `iconWestendAsset`.
    static let iconWestendAsset = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWestendAsset")
    /// Image `iconWestendSmallBg`.
    static let iconWestendSmallBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWestendSmallBg")
    /// Image `icon_about_us_bottom`.
    static let icon_about_us_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_about_us_bottom")
    /// Image `icon_about_us_icon`.
    static let icon_about_us_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_about_us_icon")
    /// Image `icon_action_offer_close`.
    static let icon_action_offer_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_action_offer_close")
    /// Image `icon_action_time_finished`.
    static let icon_action_time_finished = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_action_time_finished")
    /// Image `icon_action_time_running`.
    static let icon_action_time_running = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_action_time_running")
    /// Image `icon_address_back`.
    static let icon_address_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_back")
    /// Image `icon_address_blank`.
    static let icon_address_blank = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_blank")
    /// Image `icon_address_edit`.
    static let icon_address_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_edit")
    /// Image `icon_address_mask`.
    static let icon_address_mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address_mask")
    /// Image `icon_address`.
    static let icon_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_address")
    /// Image `icon_agree_normal`.
    static let icon_agree_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_agree_normal")
    /// Image `icon_agree_register_normal`.
    static let icon_agree_register_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_agree_register_normal")
    /// Image `icon_agree_register_selected`.
    static let icon_agree_register_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_agree_register_selected")
    /// Image `icon_agree_selected`.
    static let icon_agree_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_agree_selected")
    /// Image `icon_applycert_arrowapply`.
    static let icon_applycert_arrowapply = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_applycert_arrowapply")
    /// Image `icon_applycert_arrowdown`.
    static let icon_applycert_arrowdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_applycert_arrowdown")
    /// Image `icon_applycert_arrowright`.
    static let icon_applycert_arrowright = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_applycert_arrowright")
    /// Image `icon_applycert_background`.
    static let icon_applycert_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_applycert_background")
    /// Image `icon_applycert_works_select_normal`.
    static let icon_applycert_works_select_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_applycert_works_select_normal")
    /// Image `icon_applycert_works_select_selected`.
    static let icon_applycert_works_select_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_applycert_works_select_selected")
    /// Image `icon_applycert_works`.
    static let icon_applycert_works = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_applycert_works")
    /// Image `icon_artdetail_selling_arrow`.
    static let icon_artdetail_selling_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_artdetail_selling_arrow")
    /// Image `icon_auction_sanjiaoxing`.
    static let icon_auction_sanjiaoxing = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_auction_sanjiaoxing")
    /// Image `icon_auction_time`.
    static let icon_auction_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_auction_time")
    /// Image `icon_auth_alirealname`.
    static let icon_auth_alirealname = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_auth_alirealname")
    /// Image `icon_auth_realname`.
    static let icon_auth_realname = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_auth_realname")
    /// Image `icon_back_auctioning`.
    static let icon_back_auctioning = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back_auctioning")
    /// Image `icon_back_white`.
    static let icon_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back_white")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `icon_box_card_back`.
    static let icon_box_card_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_box_card_back")
    /// Image `icon_box_card_close`.
    static let icon_box_card_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_box_card_close")
    /// Image `icon_box_one_time`.
    static let icon_box_one_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_box_one_time")
    /// Image `icon_box_rare`.
    static let icon_box_rare = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_box_rare")
    /// Image `icon_box_ten_time`.
    static let icon_box_ten_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_box_ten_time")
    /// Image `icon_calcinput_line`.
    static let icon_calcinput_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calcinput_line")
    /// Image `icon_cert_left`.
    static let icon_cert_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cert_left")
    /// Image `icon_cert_right`.
    static let icon_cert_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cert_right")
    /// Image `icon_common_close`.
    static let icon_common_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_common_close")
    /// Image `icon_common_search_red`.
    static let icon_common_search_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_common_search_red")
    /// Image `icon_common_search`.
    static let icon_common_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_common_search")
    /// Image `icon_common_snapshot_notice`.
    static let icon_common_snapshot_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_common_snapshot_notice")
    /// Image `icon_creator_city`.
    static let icon_creator_city = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_creator_city")
    /// Image `icon_creator_platform`.
    static let icon_creator_platform = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_creator_platform")
    /// Image `icon_creator_school`.
    static let icon_creator_school = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_creator_school")
    /// Image `icon_customer_service_back`.
    static let icon_customer_service_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_customer_service_back")
    /// Image `icon_guidance_1_indicator`.
    static let icon_guidance_1_indicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guidance_1_indicator")
    /// Image `icon_guidance_1`.
    static let icon_guidance_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guidance_1")
    /// Image `icon_guidance_2_indicator`.
    static let icon_guidance_2_indicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guidance_2_indicator")
    /// Image `icon_guidance_2`.
    static let icon_guidance_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guidance_2")
    /// Image `icon_guidance_3_enter`.
    static let icon_guidance_3_enter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guidance_3_enter")
    /// Image `icon_guidance_3`.
    static let icon_guidance_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_guidance_3")
    /// Image `icon_home_announce_back`.
    static let icon_home_announce_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_announce_back")
    /// Image `icon_home_announce_title`.
    static let icon_home_announce_title = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_announce_title")
    /// Image `icon_home_apply_cert`.
    static let icon_home_apply_cert = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_apply_cert")
    /// Image `icon_home_artdetail_arrow`.
    static let icon_home_artdetail_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_artdetail_arrow")
    /// Image `icon_home_artdetail_photo_browser_close`.
    static let icon_home_artdetail_photo_browser_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_artdetail_photo_browser_close")
    /// Image `icon_home_artdetail_photo_browser`.
    static let icon_home_artdetail_photo_browser = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_artdetail_photo_browser")
    /// Image `icon_home_artdetail_qrcode`.
    static let icon_home_artdetail_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_artdetail_qrcode")
    /// Image `icon_home_artdetail_shoppingcart`.
    static let icon_home_artdetail_shoppingcart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_artdetail_shoppingcart")
    /// Image `icon_home_auction_left`.
    static let icon_home_auction_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_auction_left")
    /// Image `icon_home_auction_num`.
    static let icon_home_auction_num = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_auction_num")
    /// Image `icon_home_auction_right`.
    static let icon_home_auction_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_auction_right")
    /// Image `icon_home_auction_time`.
    static let icon_home_auction_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_auction_time")
    /// Image `icon_home_cert_query`.
    static let icon_home_cert_query = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_cert_query")
    /// Image `icon_home_chainquery_scan`.
    static let icon_home_chainquery_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_chainquery_scan")
    /// Image `icon_home_points_wallet`.
    static let icon_home_points_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_points_wallet")
    /// Image `icon_home_wallet_point`.
    static let icon_home_wallet_point = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_home_wallet_point")
    /// Image `icon_homepage_line`.
    static let icon_homepage_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_homepage_line")
    /// Image `icon_imageclip_back`.
    static let icon_imageclip_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_imageclip_back")
    /// Image `icon_imageclip_clip`.
    static let icon_imageclip_clip = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_imageclip_clip")
    /// Image `icon_launch_auction_arrow`.
    static let icon_launch_auction_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_launch_auction_arrow")
    /// Image `icon_liveness_interrupt`.
    static let icon_liveness_interrupt = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_liveness_interrupt")
    /// Image `icon_login_back`.
    static let icon_login_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_login_back")
    /// Image `icon_mine_address_add`.
    static let icon_mine_address_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_address_add")
    /// Image `icon_mine_address_select`.
    static let icon_mine_address_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_address_select")
    /// Image `icon_mine_app_aboutus`.
    static let icon_mine_app_aboutus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_aboutus")
    /// Image `icon_mine_app_address`.
    static let icon_mine_app_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_address")
    /// Image `icon_mine_app_auction`.
    static let icon_mine_app_auction = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_auction")
    /// Image `icon_mine_app_collect`.
    static let icon_mine_app_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_collect")
    /// Image `icon_mine_app_customer_service`.
    static let icon_mine_app_customer_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_customer_service")
    /// Image `icon_mine_app_exchange`.
    static let icon_mine_app_exchange = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_exchange")
    /// Image `icon_mine_app_feedback`.
    static let icon_mine_app_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_feedback")
    /// Image `icon_mine_app_homepage`.
    static let icon_mine_app_homepage = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_homepage")
    /// Image `icon_mine_app_message`.
    static let icon_mine_app_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_message")
    /// Image `icon_mine_app_order_buy`.
    static let icon_mine_app_order_buy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_order_buy")
    /// Image `icon_mine_app_order_sell`.
    static let icon_mine_app_order_sell = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_order_sell")
    /// Image `icon_mine_app_work_upload`.
    static let icon_mine_app_work_upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_app_work_upload")
    /// Image `icon_mine_avatar_placeholder`.
    static let icon_mine_avatar_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_avatar_placeholder")
    /// Image `icon_mine_focus_product`.
    static let icon_mine_focus_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_focus_product")
    /// Image `icon_mine_no_realname`.
    static let icon_mine_no_realname = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_no_realname")
    /// Image `icon_mine_order_orderno`.
    static let icon_mine_order_orderno = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_order_orderno")
    /// Image `icon_mine_point_desc`.
    static let icon_mine_point_desc = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_point_desc")
    /// Image `icon_mine_point`.
    static let icon_mine_point = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_point")
    /// Image `icon_mine_realname_successed`.
    static let icon_mine_realname_successed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_realname_successed")
    /// Image `icon_mine_realnamed`.
    static let icon_mine_realnamed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_realnamed")
    /// Image `icon_mine_setting`.
    static let icon_mine_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_setting")
    /// Image `icon_mine_upload_add`.
    static let icon_mine_upload_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_add")
    /// Image `icon_mine_upload_arrowright`.
    static let icon_mine_upload_arrowright = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_arrowright")
    /// Image `icon_mine_upload_delete`.
    static let icon_mine_upload_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_delete")
    /// Image `icon_mine_upload_eg1`.
    static let icon_mine_upload_eg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_eg1")
    /// Image `icon_mine_upload_eg2`.
    static let icon_mine_upload_eg2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_eg2")
    /// Image `icon_mine_upload_eg3`.
    static let icon_mine_upload_eg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_eg3")
    /// Image `icon_mine_upload_notice`.
    static let icon_mine_upload_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_notice")
    /// Image `icon_mine_upload_select_arrowdown`.
    static let icon_mine_upload_select_arrowdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mine_upload_select_arrowdown")
    /// Image `icon_navi_customer_service`.
    static let icon_navi_customer_service = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navi_customer_service")
    /// Image `icon_navi_message`.
    static let icon_navi_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navi_message")
    /// Image `icon_navi_scan`.
    static let icon_navi_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_navi_scan")
    /// Image `icon_order_blank`.
    static let icon_order_blank = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_order_blank")
    /// Image `icon_order_logistics_close`.
    static let icon_order_logistics_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_order_logistics_close")
    /// Image `icon_pay_method_normal`.
    static let icon_pay_method_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pay_method_normal")
    /// Image `icon_pay_method_selected`.
    static let icon_pay_method_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pay_method_selected")
    /// Image `icon_paymethod_alipay`.
    static let icon_paymethod_alipay = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_paymethod_alipay")
    /// Image `icon_paymethod_wechat`.
    static let icon_paymethod_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_paymethod_wechat")
    /// Image `icon_phone`.
    static let icon_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_phone")
    /// Image `icon_product_collect_selected`.
    static let icon_product_collect_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_product_collect_selected")
    /// Image `icon_product_collect`.
    static let icon_product_collect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_product_collect")
    /// Image `icon_product_dislike_selected`.
    static let icon_product_dislike_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_product_dislike_selected")
    /// Image `icon_product_dislike`.
    static let icon_product_dislike = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_product_dislike")
    /// Image `icon_product_like_selected`.
    static let icon_product_like_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_product_like_selected")
    /// Image `icon_product_like`.
    static let icon_product_like = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_product_like")
    /// Image `icon_pwd_hidden`.
    static let icon_pwd_hidden = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pwd_hidden")
    /// Image `icon_pwd_show`.
    static let icon_pwd_show = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pwd_show")
    /// Image `icon_pwd`.
    static let icon_pwd = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pwd")
    /// Image `icon_qianbao_bg`.
    static let icon_qianbao_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qianbao_bg")
    /// Image `icon_realname_back`.
    static let icon_realname_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_realname_back")
    /// Image `icon_realname_camera`.
    static let icon_realname_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_realname_camera")
    /// Image `icon_realname_front`.
    static let icon_realname_front = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_realname_front")
    /// Image `icon_register_back`.
    static let icon_register_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_register_back")
    /// Image `icon_scan_back`.
    static let icon_scan_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_scan_back")
    /// Image `icon_search_delete`.
    static let icon_search_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_delete")
    /// Image `icon_tab_nomal_home`.
    static let icon_tab_nomal_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_nomal_home")
    /// Image `icon_tab_nomal_mine`.
    static let icon_tab_nomal_mine = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_nomal_mine")
    /// Image `icon_tab_normal_new`.
    static let icon_tab_normal_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_normal_new")
    /// Image `icon_tab_normal_old`.
    static let icon_tab_normal_old = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_normal_old")
    /// Image `icon_tab_selected_home`.
    static let icon_tab_selected_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_selected_home")
    /// Image `icon_tab_selected_mine`.
    static let icon_tab_selected_mine = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_selected_mine")
    /// Image `icon_tab_selected_new`.
    static let icon_tab_selected_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_selected_new")
    /// Image `icon_tab_selected_old`.
    static let icon_tab_selected_old = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tab_selected_old")
    /// Image `icon_theme_see_more`.
    static let icon_theme_see_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_theme_see_more")
    /// Image `icon_verifycode`.
    static let icon_verifycode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_verifycode")
    /// Image `icon_wallet_address_copy`.
    static let icon_wallet_address_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_address_copy")
    /// Image `icon_wallet_address_qrcode`.
    static let icon_wallet_address_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_address_qrcode")
    /// Image `icon_wallet_backup`.
    static let icon_wallet_backup = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_backup")
    /// Image `icon_wallet_board`.
    static let icon_wallet_board = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_board")
    /// Image `icon_wallet_edit_arrowright`.
    static let icon_wallet_edit_arrowright = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_edit_arrowright")
    /// Image `icon_wallet_edit`.
    static let icon_wallet_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_edit")
    /// Image `icon_wallet_export_keystore_notice`.
    static let icon_wallet_export_keystore_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_export_keystore_notice")
    /// Image `icon_wallet_export`.
    static let icon_wallet_export = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_export")
    /// Image `icon_wallet_import_arrow`.
    static let icon_wallet_import_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_import_arrow")
    /// Image `icon_wallet_import_notice`.
    static let icon_wallet_import_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_import_notice")
    /// Image `icon_wallet_keystore_safe`.
    static let icon_wallet_keystore_safe = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_keystore_safe")
    /// Image `icon_wallet_point_help`.
    static let icon_wallet_point_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_point_help")
    /// Image `icon_wallet_qrscan`.
    static let icon_wallet_qrscan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_qrscan")
    /// Image `icon_wallet_transfer_qrcodescan`.
    static let icon_wallet_transfer_qrcodescan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_wallet_transfer_qrcodescan")
    /// Image `listCheckmarkIcon`.
    static let listCheckmarkIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "listCheckmarkIcon")
    /// Image `logoSoramitsu`.
    static let logoSoramitsu = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoSoramitsu")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `mine_arrow_icon`.
    static let mine_arrow_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_arrow_icon")
    /// Image `mine_top_bg`.
    static let mine_top_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "mine_top_bg")
    /// Image `nft_video_play_icon1`.
    static let nft_video_play_icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "nft_video_play_icon1")
    /// Image `nft_video_play_icon2`.
    static let nft_video_play_icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "nft_video_play_icon2")
    /// Image `order_detail_bg`.
    static let order_detail_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_detail_bg")
    /// Image `order_detail_success_icon`.
    static let order_detail_success_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_detail_success_icon")
    /// Image `order_list_bg`.
    static let order_list_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "order_list_bg")
    /// Image `photos_icon`.
    static let photos_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "photos_icon")
    /// Image `pinBackspace`.
    static let pinBackspace = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinBackspace")
    /// Image `pinFingerprint`.
    static let pinFingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinFingerprint")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `savePicture`.
    static let savePicture = Rswift.ImageResource(bundle: R.hostingBundle, name: "savePicture")
    /// Image `save`.
    static let save = Rswift.ImageResource(bundle: R.hostingBundle, name: "save")
    /// Image `scan_back`.
    static let scan_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan_back")
    /// Image `search_history_clear_icon`.
    static let search_history_clear_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_history_clear_icon")
    /// Image `search_icon_clear_red`.
    static let search_icon_clear_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_icon_clear_red")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditBrushMosaic", bundle: ..., traitCollection: ...)`
    static func editBrushMosaic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editBrushMosaic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditBrushMosaicSelected", bundle: ..., traitCollection: ...)`
    static func editBrushMosaicSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editBrushMosaicSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditImageClipCancel", bundle: ..., traitCollection: ...)`
    static func editImageClipCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editImageClipCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditImageClipDone", bundle: ..., traitCollection: ...)`
    static func editImageClipDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editImageClipDone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuClipImage", bundle: ..., traitCollection: ...)`
    static func editMenuClipImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuClipImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuCut", bundle: ..., traitCollection: ...)`
    static func editMenuCut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuCut, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuCutSelected", bundle: ..., traitCollection: ...)`
    static func editMenuCutSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuCutSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuGraffiti", bundle: ..., traitCollection: ...)`
    static func editMenuGraffiti(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuGraffiti, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuGraffitiBack", bundle: ..., traitCollection: ...)`
    static func editMenuGraffitiBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuGraffitiBack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuGraffitiSelected", bundle: ..., traitCollection: ...)`
    static func editMenuGraffitiSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuGraffitiSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuMosaic", bundle: ..., traitCollection: ...)`
    static func editMenuMosaic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuMosaic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuMosaicSelected", bundle: ..., traitCollection: ...)`
    static func editMenuMosaicSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuMosaicSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuSticker", bundle: ..., traitCollection: ...)`
    static func editMenuSticker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuSticker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuStickerSelected", bundle: ..., traitCollection: ...)`
    static func editMenuStickerSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuStickerSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuText", bundle: ..., traitCollection: ...)`
    static func editMenuText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuTextBackgroundColor", bundle: ..., traitCollection: ...)`
    static func editMenuTextBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuTextBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuTextColor", bundle: ..., traitCollection: ...)`
    static func editMenuTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMenuTextSelected", bundle: ..., traitCollection: ...)`
    static func editMenuTextSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMenuTextSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditMosaicBrush", bundle: ..., traitCollection: ...)`
    static func editMosaicBrush(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editMosaicBrush, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditTraditionalMosaic", bundle: ..., traitCollection: ...)`
    static func editTraditionalMosaic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editTraditionalMosaic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditTraditionalMosaicSelected", bundle: ..., traitCollection: ...)`
    static func editTraditionalMosaicSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editTraditionalMosaicSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "QRCodeScanLine", bundle: ..., traitCollection: ...)`
    static func qrCodeScanLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCodeScanLine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_version_update_bg", bundle: ..., traitCollection: ...)`
    static func app_version_update_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_version_update_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "app_version_update_close", bundle: ..., traitCollection: ...)`
    static func app_version_update_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.app_version_update_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backgroundImage", bundle: ..., traitCollection: ...)`
    static func backgroundImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cameraAround", bundle: ..., traitCollection: ...)`
    static func cameraAround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraAround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancle", bundle: ..., traitCollection: ...)`
    static func cancle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cer-bg", bundle: ..., traitCollection: ...)`
    static func cerBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cerBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "certificate_bg", bundle: ..., traitCollection: ...)`
    static func certificate_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.certificate_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "certificate_bg_bottom", bundle: ..., traitCollection: ...)`
    static func certificate_bg_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.certificate_bg_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "certificate_bg_title", bundle: ..., traitCollection: ...)`
    static func certificate_bg_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.certificate_bg_title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "certificate_bg_top_left", bundle: ..., traitCollection: ...)`
    static func certificate_bg_top_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.certificate_bg_top_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "certificate_bg_top_right", bundle: ..., traitCollection: ...)`
    static func certificate_bg_top_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.certificate_bg_top_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "certificate_close", bundle: ..., traitCollection: ...)`
    static func certificate_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.certificate_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "certificate_thumbnail", bundle: ..., traitCollection: ...)`
    static func certificate_thumbnail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.certificate_thumbnail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customer_service_email_icon", bundle: ..., traitCollection: ...)`
    static func customer_service_email_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer_service_email_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customer_service_qq_icon", bundle: ..., traitCollection: ...)`
    static func customer_service_qq_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer_service_qq_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "customer_service_wechat_icon", bundle: ..., traitCollection: ...)`
    static func customer_service_wechat_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.customer_service_wechat_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hVideo_cancel_refresh", bundle: ..., traitCollection: ...)`
    static func hVideo_cancel_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hVideo_cancel_refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hVideo_confirm_back", bundle: ..., traitCollection: ...)`
    static func hVideo_confirm_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hVideo_confirm_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hVideo_focusing", bundle: ..., traitCollection: ...)`
    static func hVideo_focusing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hVideo_focusing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hVideo_take", bundle: ..., traitCollection: ...)`
    static func hVideo_take(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hVideo_take, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_page_placeholder_edit", bundle: ..., traitCollection: ...)`
    static func home_page_placeholder_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_page_placeholder_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_page_top_bg", bundle: ..., traitCollection: ...)`
    static func home_page_top_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_page_top_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_down_left", bundle: ..., traitCollection: ...)`
    static func ic_down_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_down_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_down_right", bundle: ..., traitCollection: ...)`
    static func ic_down_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_down_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_rotation", bundle: ..., traitCollection: ...)`
    static func ic_rotation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_rotation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_up_left", bundle: ..., traitCollection: ...)`
    static func ic_up_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_up_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_up_right", bundle: ..., traitCollection: ...)`
    static func ic_up_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_up_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAboutArrow", bundle: ..., traitCollection: ...)`
    static func iconAboutArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAboutEmail", bundle: ..., traitCollection: ...)`
    static func iconAboutEmail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutEmail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAboutGit", bundle: ..., traitCollection: ...)`
    static func iconAboutGit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutGit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAboutTg", bundle: ..., traitCollection: ...)`
    static func iconAboutTg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutTg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAboutWeb", bundle: ..., traitCollection: ...)`
    static func iconAboutWeb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutWeb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconAlert", bundle: ..., traitCollection: ...)`
    static func iconAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAlert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconBuy", bundle: ..., traitCollection: ...)`
    static func iconBuy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBuy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconClose", bundle: ..., traitCollection: ...)`
    static func iconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconClose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconCopy", bundle: ..., traitCollection: ...)`
    static func iconCopy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCopy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDropDown", bundle: ..., traitCollection: ...)`
    static func iconDropDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDropDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEmptyHistory", bundle: ..., traitCollection: ...)`
    static func iconEmptyHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEmptyHistory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEmptySearch", bundle: ..., traitCollection: ...)`
    static func iconEmptySearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEmptySearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconError", bundle: ..., traitCollection: ...)`
    static func iconError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconExport", bundle: ..., traitCollection: ...)`
    static func iconExport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconExport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconEye", bundle: ..., traitCollection: ...)`
    static func iconEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconFearlessLog", bundle: ..., traitCollection: ...)`
    static func iconFearlessLog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFearlessLog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconInfo", bundle: ..., traitCollection: ...)`
    static func iconInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconInfoSend", bundle: ..., traitCollection: ...)`
    static func iconInfoSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfoSend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconInvalid", bundle: ..., traitCollection: ...)`
    static func iconInvalid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInvalid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconKeyboardOff", bundle: ..., traitCollection: ...)`
    static func iconKeyboardOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconKeyboardOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconKsm", bundle: ..., traitCollection: ...)`
    static func iconKsm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconKsm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconKsmAsset", bundle: ..., traitCollection: ...)`
    static func iconKsmAsset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconKsmAsset, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconKsmSmallBg", bundle: ..., traitCollection: ...)`
    static func iconKsmSmallBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconKsmSmallBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLoadingIndicator", bundle: ..., traitCollection: ...)`
    static func iconLoadingIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLoadingIndicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconMore", bundle: ..., traitCollection: ...)`
    static func iconMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconNoEye", bundle: ..., traitCollection: ...)`
    static func iconNoEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconNoEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPlus", bundle: ..., traitCollection: ...)`
    static func iconPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPolkadotAsset", bundle: ..., traitCollection: ...)`
    static func iconPolkadotAsset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPolkadotAsset, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconPolkadotSmallBg", bundle: ..., traitCollection: ...)`
    static func iconPolkadotSmallBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPolkadotSmallBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconProfileAbout", bundle: ..., traitCollection: ...)`
    static func iconProfileAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfileAbout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconProfileAccounts", bundle: ..., traitCollection: ...)`
    static func iconProfileAccounts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfileAccounts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconProfileLanguage", bundle: ..., traitCollection: ...)`
    static func iconProfileLanguage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfileLanguage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconProfileNetworks", bundle: ..., traitCollection: ...)`
    static func iconProfileNetworks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfileNetworks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconProfilePin", bundle: ..., traitCollection: ...)`
    static func iconProfilePin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconProfilePin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconReceive", bundle: ..., traitCollection: ...)`
    static func iconReceive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconReceive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconRetry", bundle: ..., traitCollection: ...)`
    static func iconRetry(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRetry, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSaveSend", bundle: ..., traitCollection: ...)`
    static func iconSaveSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSaveSend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconScanQr", bundle: ..., traitCollection: ...)`
    static func iconScanQr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconScanQr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSearch", bundle: ..., traitCollection: ...)`
    static func iconSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSend", bundle: ..., traitCollection: ...)`
    static func iconSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconShare", bundle: ..., traitCollection: ...)`
    static func iconShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconShare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSmallAdd", bundle: ..., traitCollection: ...)`
    static func iconSmallAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSmallAdd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconSmallArrow", bundle: ..., traitCollection: ...)`
    static func iconSmallArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSmallArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabExtrinsics", bundle: ..., traitCollection: ...)`
    static func iconTabExtrinsics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabExtrinsics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabGov", bundle: ..., traitCollection: ...)`
    static func iconTabGov(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabGov, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabPolkaswap", bundle: ..., traitCollection: ...)`
    static func iconTabPolkaswap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabPolkaswap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabSettings", bundle: ..., traitCollection: ...)`
    static func iconTabSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabSettings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabStaking", bundle: ..., traitCollection: ...)`
    static func iconTabStaking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabStaking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTabWallet", bundle: ..., traitCollection: ...)`
    static func iconTabWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTabWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTermsProfile", bundle: ..., traitCollection: ...)`
    static func iconTermsProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTermsProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTxFailed", bundle: ..., traitCollection: ...)`
    static func iconTxFailed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTxFailed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconTxPending", bundle: ..., traitCollection: ...)`
    static func iconTxPending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTxPending, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconUpload", bundle: ..., traitCollection: ...)`
    static func iconUpload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconUpload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconValid", bundle: ..., traitCollection: ...)`
    static func iconValid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconValid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconValidBig", bundle: ..., traitCollection: ...)`
    static func iconValidBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconValidBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWarning", bundle: ..., traitCollection: ...)`
    static func iconWarning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWarning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWestendAsset", bundle: ..., traitCollection: ...)`
    static func iconWestendAsset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWestendAsset, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconWestendSmallBg", bundle: ..., traitCollection: ...)`
    static func iconWestendSmallBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWestendSmallBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_about_us_bottom", bundle: ..., traitCollection: ...)`
    static func icon_about_us_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_about_us_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_about_us_icon", bundle: ..., traitCollection: ...)`
    static func icon_about_us_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_about_us_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_action_offer_close", bundle: ..., traitCollection: ...)`
    static func icon_action_offer_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_action_offer_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_action_time_finished", bundle: ..., traitCollection: ...)`
    static func icon_action_time_finished(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_action_time_finished, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_action_time_running", bundle: ..., traitCollection: ...)`
    static func icon_action_time_running(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_action_time_running, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_address", bundle: ..., traitCollection: ...)`
    static func icon_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_address_back", bundle: ..., traitCollection: ...)`
    static func icon_address_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_address_blank", bundle: ..., traitCollection: ...)`
    static func icon_address_blank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_blank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_address_edit", bundle: ..., traitCollection: ...)`
    static func icon_address_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_address_mask", bundle: ..., traitCollection: ...)`
    static func icon_address_mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_address_mask, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_agree_normal", bundle: ..., traitCollection: ...)`
    static func icon_agree_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_agree_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_agree_register_normal", bundle: ..., traitCollection: ...)`
    static func icon_agree_register_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_agree_register_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_agree_register_selected", bundle: ..., traitCollection: ...)`
    static func icon_agree_register_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_agree_register_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_agree_selected", bundle: ..., traitCollection: ...)`
    static func icon_agree_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_agree_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_applycert_arrowapply", bundle: ..., traitCollection: ...)`
    static func icon_applycert_arrowapply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_applycert_arrowapply, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_applycert_arrowdown", bundle: ..., traitCollection: ...)`
    static func icon_applycert_arrowdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_applycert_arrowdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_applycert_arrowright", bundle: ..., traitCollection: ...)`
    static func icon_applycert_arrowright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_applycert_arrowright, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_applycert_background", bundle: ..., traitCollection: ...)`
    static func icon_applycert_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_applycert_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_applycert_works", bundle: ..., traitCollection: ...)`
    static func icon_applycert_works(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_applycert_works, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_applycert_works_select_normal", bundle: ..., traitCollection: ...)`
    static func icon_applycert_works_select_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_applycert_works_select_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_applycert_works_select_selected", bundle: ..., traitCollection: ...)`
    static func icon_applycert_works_select_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_applycert_works_select_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_artdetail_selling_arrow", bundle: ..., traitCollection: ...)`
    static func icon_artdetail_selling_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_artdetail_selling_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_auction_sanjiaoxing", bundle: ..., traitCollection: ...)`
    static func icon_auction_sanjiaoxing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_auction_sanjiaoxing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_auction_time", bundle: ..., traitCollection: ...)`
    static func icon_auction_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_auction_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_auth_alirealname", bundle: ..., traitCollection: ...)`
    static func icon_auth_alirealname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_auth_alirealname, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_auth_realname", bundle: ..., traitCollection: ...)`
    static func icon_auth_realname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_auth_realname, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back_auctioning", bundle: ..., traitCollection: ...)`
    static func icon_back_auctioning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_auctioning, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back_white", bundle: ..., traitCollection: ...)`
    static func icon_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_box_card_back", bundle: ..., traitCollection: ...)`
    static func icon_box_card_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_box_card_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_box_card_close", bundle: ..., traitCollection: ...)`
    static func icon_box_card_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_box_card_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_box_one_time", bundle: ..., traitCollection: ...)`
    static func icon_box_one_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_box_one_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_box_rare", bundle: ..., traitCollection: ...)`
    static func icon_box_rare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_box_rare, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_box_ten_time", bundle: ..., traitCollection: ...)`
    static func icon_box_ten_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_box_ten_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_calcinput_line", bundle: ..., traitCollection: ...)`
    static func icon_calcinput_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calcinput_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cert_left", bundle: ..., traitCollection: ...)`
    static func icon_cert_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cert_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cert_right", bundle: ..., traitCollection: ...)`
    static func icon_cert_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cert_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_common_close", bundle: ..., traitCollection: ...)`
    static func icon_common_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_common_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_common_search", bundle: ..., traitCollection: ...)`
    static func icon_common_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_common_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_common_search_red", bundle: ..., traitCollection: ...)`
    static func icon_common_search_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_common_search_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_common_snapshot_notice", bundle: ..., traitCollection: ...)`
    static func icon_common_snapshot_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_common_snapshot_notice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_creator_city", bundle: ..., traitCollection: ...)`
    static func icon_creator_city(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_creator_city, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_creator_platform", bundle: ..., traitCollection: ...)`
    static func icon_creator_platform(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_creator_platform, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_creator_school", bundle: ..., traitCollection: ...)`
    static func icon_creator_school(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_creator_school, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_customer_service_back", bundle: ..., traitCollection: ...)`
    static func icon_customer_service_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_customer_service_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guidance_1", bundle: ..., traitCollection: ...)`
    static func icon_guidance_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guidance_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guidance_1_indicator", bundle: ..., traitCollection: ...)`
    static func icon_guidance_1_indicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guidance_1_indicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guidance_2", bundle: ..., traitCollection: ...)`
    static func icon_guidance_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guidance_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guidance_2_indicator", bundle: ..., traitCollection: ...)`
    static func icon_guidance_2_indicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guidance_2_indicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guidance_3", bundle: ..., traitCollection: ...)`
    static func icon_guidance_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guidance_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_guidance_3_enter", bundle: ..., traitCollection: ...)`
    static func icon_guidance_3_enter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_guidance_3_enter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_announce_back", bundle: ..., traitCollection: ...)`
    static func icon_home_announce_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_announce_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_announce_title", bundle: ..., traitCollection: ...)`
    static func icon_home_announce_title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_announce_title, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_apply_cert", bundle: ..., traitCollection: ...)`
    static func icon_home_apply_cert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_apply_cert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_artdetail_arrow", bundle: ..., traitCollection: ...)`
    static func icon_home_artdetail_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_artdetail_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_artdetail_photo_browser", bundle: ..., traitCollection: ...)`
    static func icon_home_artdetail_photo_browser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_artdetail_photo_browser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_artdetail_photo_browser_close", bundle: ..., traitCollection: ...)`
    static func icon_home_artdetail_photo_browser_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_artdetail_photo_browser_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_artdetail_qrcode", bundle: ..., traitCollection: ...)`
    static func icon_home_artdetail_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_artdetail_qrcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_artdetail_shoppingcart", bundle: ..., traitCollection: ...)`
    static func icon_home_artdetail_shoppingcart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_artdetail_shoppingcart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_auction_left", bundle: ..., traitCollection: ...)`
    static func icon_home_auction_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_auction_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_auction_num", bundle: ..., traitCollection: ...)`
    static func icon_home_auction_num(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_auction_num, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_auction_right", bundle: ..., traitCollection: ...)`
    static func icon_home_auction_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_auction_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_auction_time", bundle: ..., traitCollection: ...)`
    static func icon_home_auction_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_auction_time, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_cert_query", bundle: ..., traitCollection: ...)`
    static func icon_home_cert_query(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_cert_query, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_chainquery_scan", bundle: ..., traitCollection: ...)`
    static func icon_home_chainquery_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_chainquery_scan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_points_wallet", bundle: ..., traitCollection: ...)`
    static func icon_home_points_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_points_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_home_wallet_point", bundle: ..., traitCollection: ...)`
    static func icon_home_wallet_point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_home_wallet_point, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_homepage_line", bundle: ..., traitCollection: ...)`
    static func icon_homepage_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_homepage_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_imageclip_back", bundle: ..., traitCollection: ...)`
    static func icon_imageclip_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_imageclip_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_imageclip_clip", bundle: ..., traitCollection: ...)`
    static func icon_imageclip_clip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_imageclip_clip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_launch_auction_arrow", bundle: ..., traitCollection: ...)`
    static func icon_launch_auction_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_launch_auction_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_liveness_interrupt", bundle: ..., traitCollection: ...)`
    static func icon_liveness_interrupt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_liveness_interrupt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_login_back", bundle: ..., traitCollection: ...)`
    static func icon_login_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_login_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_address_add", bundle: ..., traitCollection: ...)`
    static func icon_mine_address_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_address_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_address_select", bundle: ..., traitCollection: ...)`
    static func icon_mine_address_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_address_select, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_aboutus", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_aboutus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_aboutus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_address", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_auction", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_auction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_auction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_collect", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_collect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_customer_service", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_customer_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_customer_service, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_exchange", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_exchange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_exchange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_feedback", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_homepage", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_homepage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_homepage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_message", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_order_buy", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_order_buy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_order_buy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_order_sell", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_order_sell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_order_sell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_app_work_upload", bundle: ..., traitCollection: ...)`
    static func icon_mine_app_work_upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_app_work_upload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_avatar_placeholder", bundle: ..., traitCollection: ...)`
    static func icon_mine_avatar_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_avatar_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_focus_product", bundle: ..., traitCollection: ...)`
    static func icon_mine_focus_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_focus_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_no_realname", bundle: ..., traitCollection: ...)`
    static func icon_mine_no_realname(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_no_realname, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_order_orderno", bundle: ..., traitCollection: ...)`
    static func icon_mine_order_orderno(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_order_orderno, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_point", bundle: ..., traitCollection: ...)`
    static func icon_mine_point(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_point, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_point_desc", bundle: ..., traitCollection: ...)`
    static func icon_mine_point_desc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_point_desc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_realname_successed", bundle: ..., traitCollection: ...)`
    static func icon_mine_realname_successed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_realname_successed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_realnamed", bundle: ..., traitCollection: ...)`
    static func icon_mine_realnamed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_realnamed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_setting", bundle: ..., traitCollection: ...)`
    static func icon_mine_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_add", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_arrowright", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_arrowright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_arrowright, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_delete", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_eg1", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_eg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_eg1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_eg2", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_eg2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_eg2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_eg3", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_eg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_eg3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_notice", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_notice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_mine_upload_select_arrowdown", bundle: ..., traitCollection: ...)`
    static func icon_mine_upload_select_arrowdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mine_upload_select_arrowdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navi_customer_service", bundle: ..., traitCollection: ...)`
    static func icon_navi_customer_service(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navi_customer_service, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navi_message", bundle: ..., traitCollection: ...)`
    static func icon_navi_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navi_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_navi_scan", bundle: ..., traitCollection: ...)`
    static func icon_navi_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_navi_scan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_order_blank", bundle: ..., traitCollection: ...)`
    static func icon_order_blank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_order_blank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_order_logistics_close", bundle: ..., traitCollection: ...)`
    static func icon_order_logistics_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_order_logistics_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pay_method_normal", bundle: ..., traitCollection: ...)`
    static func icon_pay_method_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pay_method_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pay_method_selected", bundle: ..., traitCollection: ...)`
    static func icon_pay_method_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pay_method_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_paymethod_alipay", bundle: ..., traitCollection: ...)`
    static func icon_paymethod_alipay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_paymethod_alipay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_paymethod_wechat", bundle: ..., traitCollection: ...)`
    static func icon_paymethod_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_paymethod_wechat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_phone", bundle: ..., traitCollection: ...)`
    static func icon_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_product_collect", bundle: ..., traitCollection: ...)`
    static func icon_product_collect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_product_collect, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_product_collect_selected", bundle: ..., traitCollection: ...)`
    static func icon_product_collect_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_product_collect_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_product_dislike", bundle: ..., traitCollection: ...)`
    static func icon_product_dislike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_product_dislike, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_product_dislike_selected", bundle: ..., traitCollection: ...)`
    static func icon_product_dislike_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_product_dislike_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_product_like", bundle: ..., traitCollection: ...)`
    static func icon_product_like(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_product_like, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_product_like_selected", bundle: ..., traitCollection: ...)`
    static func icon_product_like_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_product_like_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pwd", bundle: ..., traitCollection: ...)`
    static func icon_pwd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pwd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pwd_hidden", bundle: ..., traitCollection: ...)`
    static func icon_pwd_hidden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pwd_hidden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_pwd_show", bundle: ..., traitCollection: ...)`
    static func icon_pwd_show(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pwd_show, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qianbao_bg", bundle: ..., traitCollection: ...)`
    static func icon_qianbao_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qianbao_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_realname_back", bundle: ..., traitCollection: ...)`
    static func icon_realname_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_realname_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_realname_camera", bundle: ..., traitCollection: ...)`
    static func icon_realname_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_realname_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_realname_front", bundle: ..., traitCollection: ...)`
    static func icon_realname_front(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_realname_front, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_register_back", bundle: ..., traitCollection: ...)`
    static func icon_register_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_register_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_scan_back", bundle: ..., traitCollection: ...)`
    static func icon_scan_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_scan_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_delete", bundle: ..., traitCollection: ...)`
    static func icon_search_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_nomal_home", bundle: ..., traitCollection: ...)`
    static func icon_tab_nomal_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_nomal_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_nomal_mine", bundle: ..., traitCollection: ...)`
    static func icon_tab_nomal_mine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_nomal_mine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_normal_new", bundle: ..., traitCollection: ...)`
    static func icon_tab_normal_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_normal_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_normal_old", bundle: ..., traitCollection: ...)`
    static func icon_tab_normal_old(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_normal_old, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_selected_home", bundle: ..., traitCollection: ...)`
    static func icon_tab_selected_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_selected_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_selected_mine", bundle: ..., traitCollection: ...)`
    static func icon_tab_selected_mine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_selected_mine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_selected_new", bundle: ..., traitCollection: ...)`
    static func icon_tab_selected_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_selected_new, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tab_selected_old", bundle: ..., traitCollection: ...)`
    static func icon_tab_selected_old(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tab_selected_old, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_theme_see_more", bundle: ..., traitCollection: ...)`
    static func icon_theme_see_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_theme_see_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_verifycode", bundle: ..., traitCollection: ...)`
    static func icon_verifycode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_verifycode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_address_copy", bundle: ..., traitCollection: ...)`
    static func icon_wallet_address_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_address_copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_address_qrcode", bundle: ..., traitCollection: ...)`
    static func icon_wallet_address_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_address_qrcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_backup", bundle: ..., traitCollection: ...)`
    static func icon_wallet_backup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_backup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_board", bundle: ..., traitCollection: ...)`
    static func icon_wallet_board(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_board, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_edit", bundle: ..., traitCollection: ...)`
    static func icon_wallet_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_edit_arrowright", bundle: ..., traitCollection: ...)`
    static func icon_wallet_edit_arrowright(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_edit_arrowright, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_export", bundle: ..., traitCollection: ...)`
    static func icon_wallet_export(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_export, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_export_keystore_notice", bundle: ..., traitCollection: ...)`
    static func icon_wallet_export_keystore_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_export_keystore_notice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_import_arrow", bundle: ..., traitCollection: ...)`
    static func icon_wallet_import_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_import_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_import_notice", bundle: ..., traitCollection: ...)`
    static func icon_wallet_import_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_import_notice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_keystore_safe", bundle: ..., traitCollection: ...)`
    static func icon_wallet_keystore_safe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_keystore_safe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_point_help", bundle: ..., traitCollection: ...)`
    static func icon_wallet_point_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_point_help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_qrscan", bundle: ..., traitCollection: ...)`
    static func icon_wallet_qrscan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_qrscan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_wallet_transfer_qrcodescan", bundle: ..., traitCollection: ...)`
    static func icon_wallet_transfer_qrcodescan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_wallet_transfer_qrcodescan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "listCheckmarkIcon", bundle: ..., traitCollection: ...)`
    static func listCheckmarkIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listCheckmarkIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoSoramitsu", bundle: ..., traitCollection: ...)`
    static func logoSoramitsu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoSoramitsu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_arrow_icon", bundle: ..., traitCollection: ...)`
    static func mine_arrow_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_arrow_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mine_top_bg", bundle: ..., traitCollection: ...)`
    static func mine_top_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mine_top_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nft_video_play_icon1", bundle: ..., traitCollection: ...)`
    static func nft_video_play_icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nft_video_play_icon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nft_video_play_icon2", bundle: ..., traitCollection: ...)`
    static func nft_video_play_icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nft_video_play_icon2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_detail_bg", bundle: ..., traitCollection: ...)`
    static func order_detail_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_detail_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_detail_success_icon", bundle: ..., traitCollection: ...)`
    static func order_detail_success_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_detail_success_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "order_list_bg", bundle: ..., traitCollection: ...)`
    static func order_list_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.order_list_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photos_icon", bundle: ..., traitCollection: ...)`
    static func photos_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photos_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinBackspace", bundle: ..., traitCollection: ...)`
    static func pinBackspace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinBackspace, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinFingerprint", bundle: ..., traitCollection: ...)`
    static func pinFingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinFingerprint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "save", bundle: ..., traitCollection: ...)`
    static func save(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.save, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "savePicture", bundle: ..., traitCollection: ...)`
    static func savePicture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.savePicture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scan_back", bundle: ..., traitCollection: ...)`
    static func scan_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scan_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_history_clear_icon", bundle: ..., traitCollection: ...)`
    static func search_history_clear_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_history_clear_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_icon_clear_red", bundle: ..., traitCollection: ...)`
    static func search_icon_clear_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_icon_clear_red, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 46 nibs.
  struct nib {
    /// Nib `AboutDetailsCell`.
    static let aboutDetailsCell = _R.nib._AboutDetailsCell()
    /// Nib `AboutHeaderView`.
    static let aboutHeaderView = _R.nib._AboutHeaderView()
    /// Nib `AboutTitleCell`.
    static let aboutTitleCell = _R.nib._AboutTitleCell()
    /// Nib `AboutViewController`.
    static let aboutViewController = _R.nib._AboutViewController()
    /// Nib `AccountConfirmViewController`.
    static let accountConfirmViewController = _R.nib._AccountConfirmViewController()
    /// Nib `AccountCreateViewController`.
    static let accountCreateViewController = _R.nib._AccountCreateViewController()
    /// Nib `AccountExportPasswordViewController`.
    static let accountExportPasswordViewController = _R.nib._AccountExportPasswordViewController()
    /// Nib `AccountImportViewController`.
    static let accountImportViewController = _R.nib._AccountImportViewController()
    /// Nib `AccountInfoViewController`.
    static let accountInfoViewController = _R.nib._AccountInfoViewController()
    /// Nib `AccountManagementViewController`.
    static let accountManagementViewController = _R.nib._AccountManagementViewController()
    /// Nib `AccountPickerTableViewCell`.
    static let accountPickerTableViewCell = _R.nib._AccountPickerTableViewCell()
    /// Nib `AccountTableViewCell`.
    static let accountTableViewCell = _R.nib._AccountTableViewCell()
    /// Nib `AddConnectionViewController`.
    static let addConnectionViewController = _R.nib._AddConnectionViewController()
    /// Nib `AssetDetailsView`.
    static let assetDetailsView = _R.nib._AssetDetailsView()
    /// Nib `CommingSoonViewController`.
    static let commingSoonViewController = _R.nib._CommingSoonViewController()
    /// Nib `ConnectionTableViewCell`.
    static let connectionTableViewCell = _R.nib._ConnectionTableViewCell()
    /// Nib `DetailsDisplayTableViewCell`.
    static let detailsDisplayTableViewCell = _R.nib._DetailsDisplayTableViewCell()
    /// Nib `HVideoViewController`.
    static let hVideoViewController = _R.nib._HVideoViewController()
    /// Nib `HistoryItemTableViewCell`.
    static let historyItemTableViewCell = _R.nib._HistoryItemTableViewCell()
    /// Nib `IconTitleHeaderView`.
    static let iconTitleHeaderView = _R.nib._IconTitleHeaderView()
    /// Nib `IconWithTitleTableViewCell`.
    static let iconWithTitleTableViewCell = _R.nib._IconWithTitleTableViewCell()
    /// Nib `JLBackupNoticeViewController`.
    static let jlBackupNoticeViewController = _R.nib._JLBackupNoticeViewController()
    /// Nib `ModalPickerViewController`.
    static let modalPickerViewController = _R.nib._ModalPickerViewController()
    /// Nib `NetworkInfoViewController`.
    static let networkInfoViewController = _R.nib._NetworkInfoViewController()
    /// Nib `NetworkManagementViewController`.
    static let networkManagementViewController = _R.nib._NetworkManagementViewController()
    /// Nib `OnbordingMain`.
    static let onbordingMain = _R.nib._OnbordingMain()
    /// Nib `PinSetupViewController`.
    static let pinSetupViewController = _R.nib._PinSetupViewController()
    /// Nib `ProfileDetailsTableViewCell`.
    static let profileDetailsTableViewCell = _R.nib._ProfileDetailsTableViewCell()
    /// Nib `ProfileSectionTableViewCell`.
    static let profileSectionTableViewCell = _R.nib._ProfileSectionTableViewCell()
    /// Nib `ProfileTableViewCell`.
    static let profileTableViewCell = _R.nib._ProfileTableViewCell()
    /// Nib `ProfileViewController`.
    static let profileViewController = _R.nib._ProfileViewController()
    /// Nib `ReceiveHeaderView`.
    static let receiveHeaderView = _R.nib._ReceiveHeaderView()
    /// Nib `SelectionListViewController`.
    static let selectionListViewController = _R.nib._SelectionListViewController()
    /// Nib `SelectionSubtitleTableViewCell`.
    static let selectionSubtitleTableViewCell = _R.nib._SelectionSubtitleTableViewCell()
    /// Nib `SelectionTitleTableViewCell`.
    static let selectionTitleTableViewCell = _R.nib._SelectionTitleTableViewCell()
    /// Nib `TitleWithSubtitleTableViewCell`.
    static let titleWithSubtitleTableViewCell = _R.nib._TitleWithSubtitleTableViewCell()
    /// Nib `TransactionDetailsAccessoryView`.
    static let transactionDetailsAccessoryView = _R.nib._TransactionDetailsAccessoryView()
    /// Nib `TransferConfirmAccessoryView`.
    static let transferConfirmAccessoryView = _R.nib._TransferConfirmAccessoryView()
    /// Nib `UsernameSetupViewController`.
    static let usernameSetupViewController = _R.nib._UsernameSetupViewController()
    /// Nib `WalletActionsCell`.
    static let walletActionsCell = _R.nib._WalletActionsCell()
    /// Nib `WalletAmountView`.
    static let walletAmountView = _R.nib._WalletAmountView()
    /// Nib `WalletAssetCell`.
    static let walletAssetCell = _R.nib._WalletAssetCell()
    /// Nib `WalletCompoundDetailsView`.
    static let walletCompoundDetailsView = _R.nib._WalletCompoundDetailsView()
    /// Nib `WalletSingleActionAccessoryView`.
    static let walletSingleActionAccessoryView = _R.nib._WalletSingleActionAccessoryView()
    /// Nib `WalletTokenView`.
    static let walletTokenView = _R.nib._WalletTokenView()
    /// Nib `WalletTotalPriceCell`.
    static let walletTotalPriceCell = _R.nib._WalletTotalPriceCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutDetailsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutDetailsCell) instead")
    static func aboutDetailsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutDetailsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutHeaderView) instead")
    static func aboutHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutTitleCell) instead")
    static func aboutTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutViewController) instead")
    static func aboutViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountConfirmViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountConfirmViewController) instead")
    static func accountConfirmViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountConfirmViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountCreateViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountCreateViewController) instead")
    static func accountCreateViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountCreateViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountExportPasswordViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountExportPasswordViewController) instead")
    static func accountExportPasswordViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountExportPasswordViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountImportViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountImportViewController) instead")
    static func accountImportViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountImportViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountInfoViewController) instead")
    static func accountInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountInfoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountManagementViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountManagementViewController) instead")
    static func accountManagementViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountManagementViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountPickerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountPickerTableViewCell) instead")
    static func accountPickerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountPickerTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountTableViewCell) instead")
    static func accountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddConnectionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addConnectionViewController) instead")
    static func addConnectionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addConnectionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AssetDetailsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.assetDetailsView) instead")
    static func assetDetailsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.assetDetailsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommingSoonViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commingSoonViewController) instead")
    static func commingSoonViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commingSoonViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ConnectionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.connectionTableViewCell) instead")
    static func connectionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.connectionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailsDisplayTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailsDisplayTableViewCell) instead")
    static func detailsDisplayTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailsDisplayTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HVideoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hVideoViewController) instead")
    static func hVideoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hVideoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HistoryItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyItemTableViewCell) instead")
    static func historyItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IconTitleHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.iconTitleHeaderView) instead")
    static func iconTitleHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iconTitleHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IconWithTitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.iconWithTitleTableViewCell) instead")
    static func iconWithTitleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.iconWithTitleTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JLBackupNoticeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jlBackupNoticeViewController) instead")
    static func jlBackupNoticeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jlBackupNoticeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ModalPickerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.modalPickerViewController) instead")
    static func modalPickerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.modalPickerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NetworkInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.networkInfoViewController) instead")
    static func networkInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.networkInfoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NetworkManagementViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.networkManagementViewController) instead")
    static func networkManagementViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.networkManagementViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnbordingMain", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onbordingMain) instead")
    static func onbordingMain(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onbordingMain)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PinSetupViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pinSetupViewController) instead")
    static func pinSetupViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pinSetupViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileDetailsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileDetailsTableViewCell) instead")
    static func profileDetailsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileDetailsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileSectionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileSectionTableViewCell) instead")
    static func profileSectionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileSectionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileTableViewCell) instead")
    static func profileTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileViewController) instead")
    static func profileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ReceiveHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.receiveHeaderView) instead")
    static func receiveHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.receiveHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectionListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectionListViewController) instead")
    static func selectionListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectionListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectionSubtitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectionSubtitleTableViewCell) instead")
    static func selectionSubtitleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectionSubtitleTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectionTitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectionTitleTableViewCell) instead")
    static func selectionTitleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectionTitleTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TitleWithSubtitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleWithSubtitleTableViewCell) instead")
    static func titleWithSubtitleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleWithSubtitleTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionDetailsAccessoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailsAccessoryView) instead")
    static func transactionDetailsAccessoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailsAccessoryView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransferConfirmAccessoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transferConfirmAccessoryView) instead")
    static func transferConfirmAccessoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transferConfirmAccessoryView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UsernameSetupViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.usernameSetupViewController) instead")
    static func usernameSetupViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.usernameSetupViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletActionsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletActionsCell) instead")
    static func walletActionsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletActionsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletAmountView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletAmountView) instead")
    static func walletAmountView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletAmountView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletAssetCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletAssetCell) instead")
    static func walletAssetCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletAssetCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletCompoundDetailsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletCompoundDetailsView) instead")
    static func walletCompoundDetailsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletCompoundDetailsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletSingleActionAccessoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletSingleActionAccessoryView) instead")
    static func walletSingleActionAccessoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletSingleActionAccessoryView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletTokenView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletTokenView) instead")
    static func walletTokenView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletTokenView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletTotalPriceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletTotalPriceCell) instead")
    static func walletTotalPriceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletTotalPriceCell)
    }
    #endif

    static func aboutDetailsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutDetailsCell? {
      return R.nib.aboutDetailsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutDetailsCell
    }

    static func aboutHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutHeaderView? {
      return R.nib.aboutHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutHeaderView
    }

    static func aboutTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutTitleCell? {
      return R.nib.aboutTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTitleCell
    }

    static func aboutViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.aboutViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountConfirmViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountConfirmViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountCreateViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountCreateViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountExportPasswordViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountExportPasswordViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountImportViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountImportViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountManagementViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountManagementViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func accountPickerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountPickerTableViewCell? {
      return R.nib.accountPickerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountPickerTableViewCell
    }

    static func accountTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountTableViewCell? {
      return R.nib.accountTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountTableViewCell
    }

    static func addConnectionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addConnectionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func assetDetailsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AssetDetailsView? {
      return R.nib.assetDetailsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AssetDetailsView
    }

    static func commingSoonViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.commingSoonViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func connectionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConnectionTableViewCell? {
      return R.nib.connectionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConnectionTableViewCell
    }

    static func detailsDisplayTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailsDisplayTableViewCell? {
      return R.nib.detailsDisplayTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailsDisplayTableViewCell
    }

    static func hVideoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HVideoViewController? {
      return R.nib.hVideoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HVideoViewController
    }

    static func historyItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryItemTableViewCell? {
      return R.nib.historyItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryItemTableViewCell
    }

    static func iconTitleHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconTitleHeaderView? {
      return R.nib.iconTitleHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconTitleHeaderView
    }

    static func iconWithTitleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconWithTitleTableViewCell? {
      return R.nib.iconWithTitleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconWithTitleTableViewCell
    }

    static func jlBackupNoticeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.jlBackupNoticeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func modalPickerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.modalPickerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func networkInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.networkInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func networkManagementViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.networkManagementViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onbordingMain(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onbordingMain.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pinSetupViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pinSetupViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileDetailsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileDetailsTableViewCell? {
      return R.nib.profileDetailsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileDetailsTableViewCell
    }

    static func profileSectionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileSectionTableViewCell? {
      return R.nib.profileSectionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileSectionTableViewCell
    }

    static func profileTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
      return R.nib.profileTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
    }

    static func profileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func receiveHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiveHeaderView? {
      return R.nib.receiveHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiveHeaderView
    }

    static func selectionListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.selectionListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func selectionSubtitleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionSubtitleTableViewCell? {
      return R.nib.selectionSubtitleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionSubtitleTableViewCell
    }

    static func selectionTitleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionTitleTableViewCell? {
      return R.nib.selectionTitleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionTitleTableViewCell
    }

    static func titleWithSubtitleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleWithSubtitleTableViewCell? {
      return R.nib.titleWithSubtitleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleWithSubtitleTableViewCell
    }

    static func transactionDetailsAccessoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailsAccessoryView? {
      return R.nib.transactionDetailsAccessoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailsAccessoryView
    }

    static func transferConfirmAccessoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransferConfirmAccessoryView? {
      return R.nib.transferConfirmAccessoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransferConfirmAccessoryView
    }

    static func usernameSetupViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.usernameSetupViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func walletActionsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletActionsCell? {
      return R.nib.walletActionsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletActionsCell
    }

    static func walletAmountView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.walletAmountView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func walletAssetCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletAssetCell? {
      return R.nib.walletAssetCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletAssetCell
    }

    static func walletCompoundDetailsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletCompoundDetailsView? {
      return R.nib.walletCompoundDetailsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletCompoundDetailsView
    }

    static func walletSingleActionAccessoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletSingleActionAccessoryView? {
      return R.nib.walletSingleActionAccessoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletSingleActionAccessoryView
    }

    static func walletTokenView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.walletTokenView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func walletTotalPriceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletTotalPriceCell? {
      return R.nib.walletTotalPriceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletTotalPriceCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `aboutDetailsCellId`.
    static let aboutDetailsCellId: Rswift.ReuseIdentifier<AboutDetailsCell> = Rswift.ReuseIdentifier(identifier: "aboutDetailsCellId")
    /// Reuse identifier `aboutTitleCellId`.
    static let aboutTitleCellId: Rswift.ReuseIdentifier<AboutTitleCell> = Rswift.ReuseIdentifier(identifier: "aboutTitleCellId")
    /// Reuse identifier `accountCellId`.
    static let accountCellId: Rswift.ReuseIdentifier<AccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "accountCellId")
    /// Reuse identifier `connectionCellId`.
    static let connectionCellId: Rswift.ReuseIdentifier<ConnectionTableViewCell> = Rswift.ReuseIdentifier(identifier: "connectionCellId")
    /// Reuse identifier `profileCellId`.
    static let profileCellId: Rswift.ReuseIdentifier<ProfileTableViewCell> = Rswift.ReuseIdentifier(identifier: "profileCellId")
    /// Reuse identifier `profileDetailsCellId`.
    static let profileDetailsCellId: Rswift.ReuseIdentifier<ProfileDetailsTableViewCell> = Rswift.ReuseIdentifier(identifier: "profileDetailsCellId")
    /// Reuse identifier `profileSectionCellId`.
    static let profileSectionCellId: Rswift.ReuseIdentifier<ProfileSectionTableViewCell> = Rswift.ReuseIdentifier(identifier: "profileSectionCellId")
    /// Reuse identifier `selectionItemCellId`.
    static let selectionItemCellId: Rswift.ReuseIdentifier<SelectionTitleTableViewCell> = Rswift.ReuseIdentifier(identifier: "selectionItemCellId")
    /// Reuse identifier `selectionSubtitleCellId`.
    static let selectionSubtitleCellId: Rswift.ReuseIdentifier<SelectionSubtitleTableViewCell> = Rswift.ReuseIdentifier(identifier: "selectionSubtitleCellId")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AboutDetailsCell.validate()
      try _AboutTitleCell.validate()
      try _AboutViewController.validate()
      try _AccountCreateViewController.validate()
      try _AccountExportPasswordViewController.validate()
      try _AccountImportViewController.validate()
      try _AccountInfoViewController.validate()
      try _AccountManagementViewController.validate()
      try _AccountPickerTableViewCell.validate()
      try _AccountTableViewCell.validate()
      try _AssetDetailsView.validate()
      try _CommingSoonViewController.validate()
      try _ConnectionTableViewCell.validate()
      try _HVideoViewController.validate()
      try _HistoryItemTableViewCell.validate()
      try _IconTitleHeaderView.validate()
      try _IconWithTitleTableViewCell.validate()
      try _JLBackupNoticeViewController.validate()
      try _NetworkInfoViewController.validate()
      try _NetworkManagementViewController.validate()
      try _OnbordingMain.validate()
      try _PinSetupViewController.validate()
      try _ProfileDetailsTableViewCell.validate()
      try _ProfileTableViewCell.validate()
      try _ReceiveHeaderView.validate()
      try _SelectionSubtitleTableViewCell.validate()
      try _SelectionTitleTableViewCell.validate()
      try _TitleWithSubtitleTableViewCell.validate()
      try _TransactionDetailsAccessoryView.validate()
      try _WalletActionsCell.validate()
      try _WalletCompoundDetailsView.validate()
      try _WalletTokenView.validate()
    }

    struct _AboutDetailsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AboutDetailsCell

      let bundle = R.hostingBundle
      let identifier = "aboutDetailsCellId"
      let name = "AboutDetailsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutDetailsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutDetailsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconAboutWeb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAboutWeb' is used in nib 'AboutDetailsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconAboutArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAboutArrow' is used in nib 'AboutDetailsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'AboutDetailsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'AboutDetailsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AboutHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AboutHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutHeaderView
      }

      fileprivate init() {}
    }

    struct _AboutTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AboutTitleCell

      let bundle = R.hostingBundle
      let identifier = "aboutTitleCellId"
      let name = "AboutTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutTitleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconAboutArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAboutArrow' is used in nib 'AboutTitleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'AboutTitleCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AboutViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AboutViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'AboutViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backgroundImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundImage' is used in nib 'AboutViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'AboutViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'AboutViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AccountConfirmViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountConfirmViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AccountCreateViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountCreateViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconKsmSmallBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconKsmSmallBg' is used in nib 'AccountCreateViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconDropDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDropDown' is used in nib 'AccountCreateViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AccountCreateViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'AccountCreateViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'AccountCreateViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AccountExportPasswordViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountExportPasswordViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconAlert", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAlert' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconEye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconEye' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorDarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkBlue' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'AccountExportPasswordViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AccountImportViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountImportViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconKsmSmallBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconKsmSmallBg' is used in nib 'AccountImportViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_wallet_import_notice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_import_notice' is used in nib 'AccountImportViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconAlert", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAlert' is used in nib 'AccountImportViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconDropDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconDropDown' is used in nib 'AccountImportViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AccountImportViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'AccountImportViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'AccountImportViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AccountInfoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountInfoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconSmallArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSmallArrow' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMore' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconKsm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconKsm' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconExport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconExport' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorAlmostBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorAlmostBlack' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'AccountInfoViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AccountManagementViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountManagementViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPlus' is used in nib 'AccountManagementViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSmallArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSmallArrow' is used in nib 'AccountManagementViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AccountManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'AccountManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'AccountManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'AccountManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorAlmostBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorAlmostBlack' is used in nib 'AccountManagementViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AccountPickerTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AccountPickerTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountPickerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountPickerTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "listCheckmarkIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listCheckmarkIcon' is used in nib 'AccountPickerTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorAlmostBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorAlmostBlack' is used in nib 'AccountPickerTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AccountPickerTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AccountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AccountTableViewCell

      let bundle = R.hostingBundle
      let identifier = "accountCellId"
      let name = "AccountTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AccountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AccountTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconInfo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconInfo' is used in nib 'AccountTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "listCheckmarkIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listCheckmarkIcon' is used in nib 'AccountTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'AccountTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'AccountTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AccountTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AddConnectionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddConnectionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AssetDetailsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AssetDetailsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AssetDetailsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AssetDetailsView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconReceive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconReceive' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backgroundImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundImage' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconInfoSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconInfoSend' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBuy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBuy' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconKsmAsset", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconKsmAsset' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSend' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorCellSelection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorCellSelection' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlurSeparator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlurSeparator' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGreen' is used in nib 'AssetDetailsView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CommingSoonViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommingSoonViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in nib 'CommingSoonViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backgroundImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backgroundImage' is used in nib 'CommingSoonViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'CommingSoonViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkBlue' is used in nib 'CommingSoonViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'CommingSoonViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ConnectionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ConnectionTableViewCell

      let bundle = R.hostingBundle
      let identifier = "connectionCellId"
      let name = "ConnectionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ConnectionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ConnectionTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconInfo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconInfo' is used in nib 'ConnectionTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "listCheckmarkIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listCheckmarkIcon' is used in nib 'ConnectionTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'ConnectionTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'ConnectionTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'ConnectionTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DetailsDisplayTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DetailsDisplayTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DetailsDisplayTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DetailsDisplayTableViewCell
      }

      fileprivate init() {}
    }

    struct _HVideoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HVideoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HVideoViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HVideoViewController
      }

      static func validate() throws {
        if UIKit.UIImage(named: "hVideo_confirm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hVideo_confirm' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hVideo_confirm_back.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hVideo_confirm_back.png' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hVideo_back.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hVideo_back.png' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_video_flip_camera.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_video_flip_camera.png' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hVideo_cancel_refresh.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hVideo_cancel_refresh.png' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hVideo_focusing.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hVideo_focusing.png' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hVideo_take.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hVideo_take.png' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hVideo_cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'hVideo_cancel' is used in nib 'HVideoViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _HistoryItemTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HistoryItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconTxPending", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconTxPending' is used in nib 'HistoryItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'HistoryItemTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'HistoryItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _IconTitleHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IconTitleHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconTitleHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconTitleHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconWestendSmallBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWestendSmallBg' is used in nib 'IconTitleHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'IconTitleHeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _IconWithTitleTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IconWithTitleTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IconWithTitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IconWithTitleTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconKsmSmallBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconKsmSmallBg' is used in nib 'IconWithTitleTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "listCheckmarkIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listCheckmarkIcon' is used in nib 'IconWithTitleTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'IconWithTitleTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorAlmostBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorAlmostBlack' is used in nib 'IconWithTitleTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _JLBackupNoticeViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "JLBackupNoticeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_wallet_backup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_backup' is used in nib 'JLBackupNoticeViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ModalPickerViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ModalPickerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _NetworkInfoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NetworkInfoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconKsm", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconKsm' is used in nib 'NetworkInfoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconCopy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCopy' is used in nib 'NetworkInfoViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'NetworkInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'NetworkInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'NetworkInfoViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'NetworkInfoViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NetworkManagementViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NetworkManagementViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconPlus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPlus' is used in nib 'NetworkManagementViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSmallArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSmallArrow' is used in nib 'NetworkManagementViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'NetworkManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorAlmostBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorAlmostBlack' is used in nib 'NetworkManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'NetworkManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'NetworkManagementViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'NetworkManagementViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OnbordingMain: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnbordingMain"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon_wallet_board", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_wallet_board' is used in nib 'OnbordingMain', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PinSetupViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PinSetupViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "pinBackspace", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinBackspace' is used in nib 'PinSetupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pinFingerprint", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinFingerprint' is used in nib 'PinSetupViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileDetailsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileDetailsTableViewCell

      let bundle = R.hostingBundle
      let identifier = "profileDetailsCellId"
      let name = "ProfileDetailsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileDetailsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileDetailsTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMore' is used in nib 'ProfileDetailsTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'ProfileDetailsTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'ProfileDetailsTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'ProfileDetailsTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'ProfileDetailsTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProfileSectionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileSectionTableViewCell

      let bundle = R.hostingBundle
      let identifier = "profileSectionCellId"
      let name = "ProfileSectionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileSectionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileSectionTableViewCell
      }

      fileprivate init() {}
    }

    struct _ProfileTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileTableViewCell

      let bundle = R.hostingBundle
      let identifier = "profileCellId"
      let name = "ProfileTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconSmallArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSmallArrow' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconProfileNetworks", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconProfileNetworks' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'ProfileTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProfileViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ReceiveHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReceiveHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReceiveHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReceiveHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconInfo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconInfo' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMore' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'ReceiveHeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SelectionListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SelectionListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SelectionSubtitleTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectionSubtitleTableViewCell

      let bundle = R.hostingBundle
      let identifier = "selectionSubtitleCellId"
      let name = "SelectionSubtitleTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionSubtitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionSubtitleTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "listCheckmarkIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listCheckmarkIcon' is used in nib 'SelectionSubtitleTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'SelectionSubtitleTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SelectionTitleTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SelectionTitleTableViewCell

      let bundle = R.hostingBundle
      let identifier = "selectionItemCellId"
      let name = "SelectionTitleTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectionTitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectionTitleTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "listCheckmarkIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listCheckmarkIcon' is used in nib 'SelectionTitleTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'SelectionTitleTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TitleWithSubtitleTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TitleWithSubtitleTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleWithSubtitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleWithSubtitleTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "listCheckmarkIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listCheckmarkIcon' is used in nib 'TitleWithSubtitleTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TransactionDetailsAccessoryView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionDetailsAccessoryView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailsAccessoryView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailsAccessoryView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSend' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorAlmostBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorAlmostBlack' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'TransactionDetailsAccessoryView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TransferConfirmAccessoryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransferConfirmAccessoryView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransferConfirmAccessoryView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransferConfirmAccessoryView
      }

      fileprivate init() {}
    }

    struct _UsernameSetupViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "UsernameSetupViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WalletActionsCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletActionsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletActionsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletActionsCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconReceive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconReceive' is used in nib 'WalletActionsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconSend' is used in nib 'WalletActionsCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBuy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBuy' is used in nib 'WalletActionsCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'WalletActionsCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlurSeparator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlurSeparator' is used in nib 'WalletActionsCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WalletAmountView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletAmountView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WalletAssetCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletAssetCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletAssetCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletAssetCell
      }

      fileprivate init() {}
    }

    struct _WalletCompoundDetailsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletCompoundDetailsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletCompoundDetailsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletCompoundDetailsView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconCopy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconCopy' is used in nib 'WalletCompoundDetailsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'WalletCompoundDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'WalletCompoundDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGray' is used in nib 'WalletCompoundDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorHighlightedBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorHighlightedBlue' is used in nib 'WalletCompoundDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'WalletCompoundDetailsView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorBlack' is used in nib 'WalletCompoundDetailsView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WalletSingleActionAccessoryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletSingleActionAccessoryView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletSingleActionAccessoryView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletSingleActionAccessoryView
      }

      fileprivate init() {}
    }

    struct _WalletTokenView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletTokenView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "iconInfoSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconInfoSend' is used in nib 'WalletTokenView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconKsmSmallBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconKsmSmallBg' is used in nib 'WalletTokenView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorDarkGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorDarkGray' is used in nib 'WalletTokenView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorLightGray' is used in nib 'WalletTokenView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorWhite' is used in nib 'WalletTokenView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorGreen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorGreen' is used in nib 'WalletTokenView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorCellSelection", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorCellSelection' is used in nib 'WalletTokenView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WalletTotalPriceCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalletTotalPriceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletTotalPriceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletTotalPriceCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
